# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  AWS_REGION : "us-east-1"
  
jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write

    steps:
    - name: set lower case owner name
      run: |
        echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
      env:
        OWNER: '${{ github.repository_owner }}'
        
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B clean install --file pom.xml
#--------------------------------------------------------
    - name: list curr dir
      run: ls -a
    
    - name: cd to target file and check for jar
      run: |
        cd target
        ls -a
#--------------------------------------------------------
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ghcr.io/${{ env.OWNER_LC }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ghcr.io/${{ env.OWNER_LC }}/get-client-ip-java
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ghcr.io/${{ env.OWNER_LC }}/get-client-ip-java:latest

    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_BUILDKIT: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::489172774606:role/gh-actions-role
          role-session-name: javarolesession
          aws-region: ${{ env.AWS_REGION }}
      - name: Check if launch template exists
        id: check-lt
        run: |
          LAUNCH_TEMPLATE_NAME="java-microservice-lt"

          #TODO: find graceful solution in the future
          if aws ec2 describe-launch-templates --launch-template-names java-microservice-lt > lt.json 2>&1; then
            if [ $(jq '.LaunchTemplates | length' lt.json) -eq 0 ]; then
              echo "existslt=false" >> $GITHUB_ENV
            else
              echo "existslt=true" >> $GITHUB_ENV
            fi
          else
            echo "existslt=false" >> $GITHUB_ENV
          fi

      - name: create launch template
        if: env.existslt == 'false'
        run: |
          aws ec2 create-launch-template \
            --launch-template-name java-microservice-lt \
            --version-description java microservice for Auto-Scaling Version 1 \
            --launch-template-data '{"NetworkInterfaces":[{"DeviceIndex":0,"AssociatePublicIpAddress":true,"Groups":["sg-0abe937fd14a5c9f8"],"DeleteOnTermination":true}],"ImageId":"ami-0bb84b8ffd87024d8","InstanceType":"t2.nano","KeyName":"proj_2-main-key","UserData":"IyEvYmluL2Jhc2gKc3VkbyB5dW0gdXBkYXRlIC15CnN1ZG8geXVtIGluc3RhbGwgLXkgZG9ja2VyCnN1ZG8gc2VydmljZSBkb2NrZXIgc3RhcnQKc3VkbyB1c2VybW9kIC1hIC1HIGRvY2tlciBlYzItdXNlcgpzdWRvIGRvY2tlciBwdWxsIGdoY3IuaW8vcHJheGlzYXBwZGV2L2dldC1jbGllbnQtaXAtamF2YTpsYXRlc3QKc3VkbyBkb2NrZXIgcnVuIC1kIC1wIDUwMDA6ODA4MCBnaGNyLmlvL3ByYXhpc2FwcGRldi9nZXQtY2xpZW50LWlwLWphdmE6bGF0ZXN0"}' --region us-east-1

      - name: Get Latest Launch Template Version
        id: get-lt-version
        if: env.existslt == 'true'
        run: |
          LAUNCH_TEMPLATE_NAME="java-microservice-lt"
          echo "LAUNCH_TEMPLATE_NAME=$LAUNCH_TEMPLATE_NAME" >> $GITHUB_ENV
          LATEST_VERSION=$(aws ec2 describe-launch-templates --launch-template-names $LAUNCH_TEMPLATE_NAME --query 'LaunchTemplates[0].LatestVersionNumber' --output text)
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Update launch template
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-name java-microservice-lt \
            --version-description java microservice for Auto-Scaling Version ${{ env.LATEST_VERSION }}+1 \
            --source-version 1 \
            --launch-template-data '{"NetworkInterfaces":[{"DeviceIndex":0,"AssociatePublicIpAddress":true,"Groups":["sg-0abe937fd14a5c9f8"],"DeleteOnTermination":true}],"ImageId":"ami-0bb84b8ffd87024d8","InstanceType":"t2.nano","KeyName":"proj_2-main-key","UserData":"IyEvYmluL2Jhc2gKc3VkbyB5dW0gdXBkYXRlIC15CnN1ZG8geXVtIGluc3RhbGwgLXkgZG9ja2VyCnN1ZG8gc2VydmljZSBkb2NrZXIgc3RhcnQKc3VkbyB1c2VybW9kIC1hIC1HIGRvY2tlciBlYzItdXNlcgpzdWRvIGRvY2tlciBwdWxsIGdoY3IuaW8vcHJheGlzYXBwZGV2L2dldC1jbGllbnQtaXAtamF2YTpsYXRlc3QKc3VkbyBkb2NrZXIgcnVuIC1kIC1wIDUwMDA6ODA4MCBnaGNyLmlvL3ByYXhpc2FwcGRldi9nZXQtY2xpZW50LWlwLWphdmE6bGF0ZXN0"}' --region us-east-1


